//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExaminationClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UserLogin", ReplyAction="http://tempuri.org/IService1/UserLoginResponse")]
        ExaminationClient.ServiceReference1.UserLoginResponse UserLogin(ExaminationClient.ServiceReference1.UserLoginRequest request);
        
        // CODEGEN: 正在生成消息协定，应为该操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UserLogin", ReplyAction="http://tempuri.org/IService1/UserLoginResponse")]
        System.Threading.Tasks.Task<ExaminationClient.ServiceReference1.UserLoginResponse> UserLoginAsync(ExaminationClient.ServiceReference1.UserLoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterUser", ReplyAction="http://tempuri.org/IService1/RegisterUserResponse")]
        ExaminationClient.ServiceReference1.RegisterUserResponse RegisterUser(ExaminationClient.ServiceReference1.RegisterUserRequest request);
        
        // CODEGEN: 正在生成消息协定，应为该操作具有多个返回值。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterUser", ReplyAction="http://tempuri.org/IService1/RegisterUserResponse")]
        System.Threading.Tasks.Task<ExaminationClient.ServiceReference1.RegisterUserResponse> RegisterUserAsync(ExaminationClient.ServiceReference1.RegisterUserRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserLogin", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UserLoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        public UserLoginRequest() {
        }
        
        public UserLoginRequest(string name, string password) {
            this.name = name;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UserLoginResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UserLoginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UserLoginResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string errText;
        
        public UserLoginResponse() {
        }
        
        public UserLoginResponse(bool UserLoginResult, string errText) {
            this.UserLoginResult = UserLoginResult;
            this.errText = errText;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        public RegisterUserRequest() {
        }
        
        public RegisterUserRequest(string name, string password) {
            this.name = name;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool RegisterUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string errText;
        
        public RegisterUserResponse() {
        }
        
        public RegisterUserResponse(bool RegisterUserResult, string errText) {
            this.RegisterUserResult = RegisterUserResult;
            this.errText = errText;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ExaminationClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ExaminationClient.ServiceReference1.IService1>, ExaminationClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ExaminationClient.ServiceReference1.UserLoginResponse ExaminationClient.ServiceReference1.IService1.UserLogin(ExaminationClient.ServiceReference1.UserLoginRequest request) {
            return base.Channel.UserLogin(request);
        }
        
        public bool UserLogin(string name, string password, out string errText) {
            ExaminationClient.ServiceReference1.UserLoginRequest inValue = new ExaminationClient.ServiceReference1.UserLoginRequest();
            inValue.name = name;
            inValue.password = password;
            ExaminationClient.ServiceReference1.UserLoginResponse retVal = ((ExaminationClient.ServiceReference1.IService1)(this)).UserLogin(inValue);
            errText = retVal.errText;
            return retVal.UserLoginResult;
        }
        
        public System.Threading.Tasks.Task<ExaminationClient.ServiceReference1.UserLoginResponse> UserLoginAsync(ExaminationClient.ServiceReference1.UserLoginRequest request) {
            return base.Channel.UserLoginAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ExaminationClient.ServiceReference1.RegisterUserResponse ExaminationClient.ServiceReference1.IService1.RegisterUser(ExaminationClient.ServiceReference1.RegisterUserRequest request) {
            return base.Channel.RegisterUser(request);
        }
        
        public bool RegisterUser(string name, string password, out string errText) {
            ExaminationClient.ServiceReference1.RegisterUserRequest inValue = new ExaminationClient.ServiceReference1.RegisterUserRequest();
            inValue.name = name;
            inValue.password = password;
            ExaminationClient.ServiceReference1.RegisterUserResponse retVal = ((ExaminationClient.ServiceReference1.IService1)(this)).RegisterUser(inValue);
            errText = retVal.errText;
            return retVal.RegisterUserResult;
        }
        
        public System.Threading.Tasks.Task<ExaminationClient.ServiceReference1.RegisterUserResponse> RegisterUserAsync(ExaminationClient.ServiceReference1.RegisterUserRequest request) {
            return base.Channel.RegisterUserAsync(request);
        }
    }
}
